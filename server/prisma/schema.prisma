generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Product   Product[]
  Cart      Cart[]
}

model Product {
  id        String                 @id @default(uuid())
  name      String
  price     Decimal                @db.Decimal(9, 2)
  embedding Unsupported("vector")?

  storeId  String
  store    Store      @relation(fields: [storeId], references: [id])
  CartItem CartItem[]
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updateddAt DateTime @default(now())

  Cart         Cart[]
  ChatSessions ChatSessions[]
}

model Cart {
  id        String   @id @default(uuid())
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId   String
  user     User       @relation(fields: [userId], references: [id])
  storeId  String
  store    Store      @relation(fields: [storeId], references: [id])
  CartItem CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model ChatSessions {
  id           String         @id @default(uuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  ChatMessages ChatMessages[]
}

enum Sender {
  USER
  ASSISTANT
}

enum MessageType {
  TEXT
  SUGGEST_CARTS_RESULT
}

model ChatMessages {
  id              String      @id @default(uuid())
  content         String
  sender          Sender
  openAiMessageId String?     @unique
  messageType     MessageType @default(TEXT)

  chatSessionId String
  chatSession   ChatSessions @relation(fields: [chatSessionId], references: [id])

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  ChatMessageActions ChatMessageActions[]
}

enum ActionType {
  SUGGEST_CARTS
}

model ChatMessageActions {
  id         String     @id @default(uuid())
  actionType ActionType
  payload    Json

  chatMessageId String
  chatMessage   ChatMessages @relation(fields: [chatMessageId], references: [id])

  createdAt   DateTime  @default(now())
  confirmedAt DateTime?
  executedAt  DateTime?

  @@unique([chatMessageId, actionType])
}
